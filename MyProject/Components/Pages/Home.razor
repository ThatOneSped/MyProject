@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@using MyProject.Model
@inject MyProject.Context.ItemProvider ItemProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Sidebar -->
<div id="sidebar" class="sidebar">
    <ul class="nav flex-column p-3">
        <li class="nav-item">
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-home">🏠 </i> Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-shopping-cart">🛒 </i> Shopping Cart </a>
        </li>
        <li class="nav-item">
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-info">ℹ️ </i> About</a>
        </li>
        <li class="nav-item">
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-phone">📞 </i> Contact</a>
        </li>
        <li class="nav-item">
            <a class="nav-link sidebar-link" @onclick="OnListItemClick"><i class="fas fa-plus">➕ </i> List an Item </a>
        </li>
    </ul>
</div>

<!-- Background Dimmer -->
<div id="background-dimmer" class="background-dimmer" onclick="toggleSidebar()"></div>

<!-- Main Content -->
<div id="main-content" class="main-content p-3">
    <h2>Featured Items</h2>

    <!-- Scrolling Items -->
    <div class="item-carousel">
        <button class="scroll-button left" @onclick="ScrollLeft">&lt;</button>
        <div class="item-row">
            @if (featuredItems == null || !featuredItems.Any())
            {
                <p>Loading items...</p>
            }
            else
            {
                @foreach (var item in featuredItems)
                {
                    <div class="item-card">
                        <img src="@item.ImageUrl" alt="@item.ItemName" class="item-image" />
                        <h3>@item.ItemName</h3>
                        <p>Price: £@item.ItemPrice</p>
                        <p>Size: @item.ItemSize</p>
                    </div>
                }
            }
        </div>
        <button class="scroll-button right" @onclick="ScrollRight">&gt;</button>
    </div>
</div>

<!-- Toggle Button for Sidebar -->
<button id="toggle-sidebar" onclick="toggleSidebar()" class="toggle-sidebar-btn">&#9776;</button>

<!-- CSS Styling -->
<style>
    /* Scrolling Items */
    .item-carousel {
        display: flex;
        align-items: center;
        overflow: hidden;
        position: relative;
    }

    .item-row {
        display: flex;
        overflow-x: auto;
        scroll-behavior: smooth;
    }

    .item-card {
        min-width: 200px;
        margin: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        background-color: #f9f9f9;
    }

        .item-card img {
            max-width: 100%;
            height: auto;
            border-radius: 5px;
        }

    .scroll-button {
        background: var(--primary-color);
        color: var(--text-light);
        border: none;
        border-radius: 50%;
        padding: 10px;
        font-size: 20px;
        cursor: pointer;
    }

        .scroll-button.left {
            position: absolute;
            left: 0;
        }

        .scroll-button.right {
            position: absolute;
            right: 0;
        }
</style>

@code {
    private List<Item> featuredItems = new(); // List to store featured items
    private bool IsUserLoggedIn { get; set; } // Tracks if the user is logged in

    // Called when the component initializes
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsUserLoggedIn = authenticationState.User.Identity.IsAuthenticated;

        // Fetch items from the database
        await LoadFeaturedItems();
    }

    // Load featured items from the database
    private async Task LoadFeaturedItems()
    {
        try
        {
            featuredItems = await ItemProvider.GetItemsAsync(); // grabs items using ItemProvider
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching items: {ex.Message}");
        }
    }

    // Scroll left
    private void ScrollLeft()
    {
        var row = document.getElementById("item-row");
        if (row != null)
        {
            row.scrollLeft -= 300; 
        }
    }

    // Scroll right
    private void ScrollRight()
    {
        var row = document.getElementById("item-row");
        if (row != null)
        {
            row.scrollLeft += 300; // Adjust scrolling distance as needed
        }
    }

    // This function is for when the user clicks the "List an Item" button
    private void OnListItemClick()
    {
        if (IsUserLoggedIn)
        {
            // redirect to the List an Item page if the user is logged in 
            NavigationManager.NavigateTo("/list-an-item"); 
        }
        else
        {
            // redirect to register page if the user isnt logged in
            NavigationManager.NavigateTo("/Account/Register");
        }
    }
}