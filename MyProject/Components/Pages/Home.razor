@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@using MyProject.Model
@inject MyProject.Context.ItemProvider ItemProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<!-- Sidebar -->
<div id="sidebar" class="sidebar">
    <ul class="nav flex-column p-3">
        <li class="nav-item">
            <!-- button that takes user to the main/home page-->
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-home">🏠</i> Home</a>
        </li>
        <li class="nav-item"> 
            <!-- button that takes the user to their shopping cart -->
            <a class="nav-link sidebar-link" href="#"><i class="fas fa-shopping-cart">🛒</i> Cart </a>
        </li>
        <li class="nav-item">
            <!-- button that takes user to the page where they can list their item -->
            <a class="nav-link sidebar-link" @onclick="OnListItemClick"><i class="fas fa-plus">➕</i> List an Item </a>
        </li>
    </ul>
</div>

<!-- Main Content -->
<div id="main-content" class="main-content p-3">
    <h2>Featured Items</h2>

    <!-- Scrollable Row of Items with Arrows -->
    <div class="scrollable-items-container-wrapper">
        <button class="scroll-button left" @onclick="ScrollLeft">&#8592;</button>

         <div class="scrollable-items-container">
            @foreach (var item in items)
            {
                 <div class="item-card" @onclick="() => NavigateToItemPage(item.ID)">
                    <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "images/noimage.png")" alt="@item.ItemName" /> <!-- displays image, if no image avaialable, displays default image-->
                    <p>@item.ItemName</p>
                    <p class="price">£@item.ItemPrice</p> 
                    <p class="size">Size: @(string.IsNullOrEmpty(item.ItemSize) ? "Size not available" : item.ItemSize)</p> <!-- displays ItemSize, if null displays so -->
                    <span class="heart-icon">&#9829;</span> <!-- heart icon for favouriting (will implement later) --> 
                </div> 
            }
        </div> 

        <button class="scroll-button right" @onclick="ScrollRight">&#8594;</button>
    </div>
</div>

<!-- Toggle Button for Sidebar -->
<button id="toggle-sidebar" onclick="toggleSidebar()" class="toggle-sidebar-btn">&#9776;</button>

<!--background dimmer line-->
<div class="background-dimmer" onclick="toggleSidebar()"></div>

<!-- CSS Styling -->
<style>
    /* Color Theme */

    :root {
        --primary-color: #dd5151;
        --text-light: #ffffff;
    }

    /* Toggle Button */
    .toggle-sidebar-btn {
        font-size: 24px;
        position: fixed;
        z-index: 1051;
        background: var(--primary-color);
        border: none;
        cursor: pointer;
        color: var(--text-light);
        padding: 10px;
        border-radius: 5px;
        transition: left 0.3s ease, transform 0.3s ease;
    }

        .toggle-sidebar-btn.closed {
            left: 20px; /* determines where button is on screen when sidebar is closed */
            top: 50%;
            transform: translateY(-50%);
        }

        .toggle-sidebar-btn.open {
            left: 220px; /* Position when sidebar is open */
            top: 50%;
            transform: translateY(-50%);
        }

    /* Sidebar Styling */
    .sidebar {
        width: 200px;
        height: 100vh;
        position: fixed;
        top: 56px; /* adjusts to navbar height */
        left: -200px; /* starts off hidden */
        background-color: var(--primary-color);
        border-right: 1px solid #e0e0e0;
        transition: left 0.3s ease;
        z-index: 1050;
        color: var(--text-light);
    }

        .sidebar.active {
            left: 0; /* slides into screen */
        }

    /* Sidebar Links */
    .sidebar-link {
        color: var(--text-light); /* makes sure text is white */
        padding: 15px 20px;
        font-size: 16px;
        display: block;
        text-decoration: none; /* removes underlining a regular link has */
        transition: background-color 0.3s ease, color 0.3s ease; /* smooths out transitions */
    }

        .sidebar-link:hover {
            background-color: rgba(255, 255, 255, 0.2); /* hover effect for buttons */
            color: var(--text-light); /* Ensure the text remains white on hover */
        }

    /* Background Dimmer */
    .background-dimmer {
        display: none;
        position: fixed;
        top: 56px; /* starts below navbar */
        left: 0;
        width: 100%;
        height: calc(100% - 56px); /* excludes navbar */
        background: rgba(0, 0, 0, 0.5);
        z-index: 1049;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .background-dimmer.active {
            display: block;
            opacity: 1;
        }

    /* Main Content */
    .main-content.dimmed {
        pointer-events: none; /* prevents interaction when dimmed */
    }

    /* Scrollable Row of Items with Arrow Navigation */
    .scrollable-items-container-wrapper {
        display: flex;
        align-items: center;
        position: relative;
    }

    .scrollable-items-container {
        display: flex;
        overflow: hidden;
        gap: 15px;
        padding: 10px 0;
        justify-content: start;
        flex-wrap: nowrap;
        scroll-behavior: smooth; /* Smooth scrolling */
    }

    .item-card {
        width: 200px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 10px;
        flex-shrink: 0;
    }

        .item-card img {
            width: 100%;
            border-radius: 8px;
        }

        .item-card p {
            margin-top: 8px;
            font-size: 16px;
        }

    .scroll-button {
        background: rgba(0, 0, 0, 0.5);
        color: white;
        font-size: 24px;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 40px;
        box-sizing: border-box;
    }

        .scroll-button.left {
            left: 0;
        }

        .scroll-button.right {
            right: 0;
        }

        .scroll-button:hover {
            background: rgba(0, 0, 0, 0.7); /* Darker on hover */
        }

    /* styling for the item cards */
    .item-card {
        width: 200px;
        background: #fff;
        border-radius: 12px; /* Rounded corners */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Soft shadow */
        text-align: center;
        padding: 10px;
        flex-shrink: 0;
        position: relative; /* For positioning the heart icon */
        overflow: hidden; /* To ensure the image doesn't spill out of the card */
    }

        .item-card img {
            width: 100%;
            height: 200px; /* Fixed height for uniformity */
            object-fit: cover; /* Ensures the image covers the area without distorting */
            border-radius: 8px; /* Slight rounding for the image */
        }

        .item-card p {
            margin-top: 10px;
            font-size: 16px;
            font-weight: 500;
            color: #333;
        }

        .item-card .price {
            margin-top: 5px;
            font-size: 18px;
            font-weight: 700;
            color: #dd5151; /* Highlighted price color */
        }

        .item-card .size {
            margin-top: 5px;
            font-size: 14px;
            color: #777; /* Lighter color for the size text */
        }

        .item-card .heart-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 18px;
            color: #f00; /* Red heart for likes */
            cursor: pointer;
            transition: color 0.3s ease;
        }

            .item-card .heart-icon:hover {
                color: #dd5151; /* Changes heart color when hovered */
            }

</style>

<!-- JavaScript for Sidebar Toggle -->
<script>
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const toggleButton = document.getElementById('toggle-sidebar');
        const dimmer = document.querySelector('.background-dimmer');
        const mainContent = document.getElementById('main-content');

        // Toggle the sidebar and button classes
        if (sidebar.classList.contains('active')) {
            sidebar.classList.remove('active');
            toggleButton.classList.remove('open');
            toggleButton.classList.add('closed');
            dimmer.classList.remove('active');
            mainContent.classList.remove('dimmed');
        } else {
            sidebar.classList.add('active');
            toggleButton.classList.remove('closed');
            toggleButton.classList.add('open');
            dimmer.classList.add('active');
            mainContent.classList.add('dimmed');
        }
    }

    // Set initial position of toggle button
    document.getElementById('toggle-sidebar').classList.add('closed');
</script>

<!-- JavaScript for scrolling stuff -->
<script>
    function scrollLeft() {
        var container = document.querySelector('.scrollable-items-container');
        var scrollAmount = 200; // Distance to scroll
        var currentScroll = container.scrollLeft;
        var targetScroll = currentScroll - scrollAmount;

        // Smooth scrolling via requestAnimationFrame
        smoothScroll(container, currentScroll, targetScroll);
    }

    function scrollRight() {
        var container = document.querySelector('.scrollable-items-container');
        var scrollAmount = 800;
        var currentScroll = container.scrollLeft;
        var targetScroll = currentScroll + scrollAmount;

        // Smooth scrolling via requestAnimationFrame
        smoothScroll(container, currentScroll, targetScroll);
    }

    // Smooth scroll function
    function smoothScroll(container, start, end) {
        var distance = end - start;
        var startTime = null;

        function animation(time) {
            if (!startTime) startTime = time;
            var progress = time - startTime;
            var scrollPosition = start + distance * (progress / 400); // regulate speed

            if (progress < 400) { // Duration of the scroll (in ms)
                container.scrollLeft = scrollPosition;
                window.requestAnimationFrame(animation);
            }
            else {
                container.scrollLeft = end;
            }
        }

        window.requestAnimationFrame(animation);
    }
</script>

@code {
    private bool IsUserLoggedIn { get; set; }
    private List<Item> items { get; set; } = new List<Item>();

    // checks if the user is logged in
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsUserLoggedIn = authenticationState.User.Identity.IsAuthenticated;

        // Load the items from the database
        items = await ItemProvider.GetItemsAsync(); // Assuming GetItemsAsync returns a list of items
    }

    // handles click on "List an Item" button
    private void OnListItemClick()
    {
        if (IsUserLoggedIn)
        {
            NavigationManager.NavigateTo("/list-an-item");
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Register");
        }
    }

    // calls JavaScript to scroll left
    private async Task ScrollLeft()
    {
        await JSRuntime.InvokeVoidAsync("scrollLeft");
    }

    // calls JavaScript to scroll right
    private async Task ScrollRight()
    {
        await JSRuntime.InvokeVoidAsync("scrollRight");
    }

    // takes user to item page 
    private void NavigateToItemPage(int id)
    {
        NavigationManager.NavigateTo($"/item/{id}");
    }
}