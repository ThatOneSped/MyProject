@page "/list-an-item"
@using Microsoft.AspNetCore.Components.Authorization
@using MyProject.Context
@using MyProject.Model
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ItemProvider ItemProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- area for sidebar -->
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-2 bg-dark text-white sidebar">
            <nav class="nav flex-column">
                <a class="nav-link text-white" href="/">Home</a>
                <a class="nav-link text-white" href="/my-listings">View My Listings</a>
                @if (isLoggedIn)
                {
                    <a class="nav-link text-white" href="/list-an-item">List an Item</a>
                }
                else
                {
                    <a class="nav-link text-white" href="/register">Register</a>
                }
                <a class="nav-link text-white" href="/favourites">Favourites</a>
            </nav>
        </div>

        <!-- area for form -->
        <div class="col-md-10">
            <div class="p-4">
                <h2 class="mb-4">List New Item</h2>

                <!-- form for listing items -->
                <EditForm Model="newItem" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group mb-3">
                        <label for="itemName">Item Name</label>
                        <InputText id="itemName" class="form-control" @bind-Value="newItem.ItemName" required />
                        <ValidationMessage For="@(() => newItem.ItemName)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="itemPrice">Item Price</label>
                        <InputNumber id="itemPrice" class="form-control" @bind-Value="newItem.ItemPrice" required />
                        <ValidationMessage For="@(() => newItem.ItemPrice)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="itemSize">Item Size</label>
                        <InputText id="itemSize" class="form-control" @bind-Value="newItem.ItemSize" required />
                        <ValidationMessage For="@(() => newItem.ItemSize)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="category">Category</label>
                        <InputSelect id="category" class="form-control" @bind-Value="selectedCategoryName">
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => selectedCategoryName)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="imageUpload">Image Upload</label>
                        <div class="d-flex align-items-center">
                            <InputFile id="imageUpload" class="form-control-file" OnChange="HandleImageSelected" />
                            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="() => OpenFileSelector()">Upload Image</button>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(newItem.ImageUrl))
                        {
                            <div class="mt-2">
                                <img src="@newItem.ImageUrl" alt="Selected Image" class="img-thumbnail" style="max-width: 200px;" />
                            </div>
                        }
                        <ValidationMessage For="@(() => newItem.ImageUrl)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="description">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="newItem.Description" />
                    </div>

                    @if (formSubmitted &&
                    (string.IsNullOrWhiteSpace(newItem.Description) ||
                    string.IsNullOrWhiteSpace(newItem.ImageUrl) ||
                    newItem.Category == null ||
                    string.IsNullOrWhiteSpace(newItem.Category?.CategoryName)))
                    {
                        <div class="alert alert-warning mt-2">
                            Some fields are empty: Description, Image, or Category. Items with these details are more likely to sell.
                            <button type="button" class="btn btn-outline-secondary mt-2" @onclick="ConfirmContinue">Yes, I'm sure</button>
                        </div>
                    }

                    <button type="submit" class="btn btn-primary w-100" disabled="@(!confirmationGiven && formSubmitted)">List Item</button>
                </EditForm>

                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">Item listed!</div>
                }
                else if (isError)
                {
                    <div class="alert alert-danger mt-3">Failed to list item. Please try again.</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Item newItem = new Item(); //clears form for new item
    private bool isSuccess = false; // see if item was successfully listed
    private bool isError = false; // see if there was an error when listing an item
    private bool confirmationGiven = false; // see if the user has submitted an item without optional fields
    private bool formSubmitted = false; // track if the user has attempted to submit the form
    private bool isLoggedIn = false; // track if the user is logged in
    private List<Category> categories = new(); // list of categories for dropdown
    private string selectedCategoryName; // binds category name

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isLoggedIn = user.Identity.IsAuthenticated; // sees if the user is logged in

        categories = await ItemProvider.GetCategoriesAsync(); // grabs the categories

        if (isLoggedIn)
        {
            newItem.UserId = user.FindFirst(c => c.Type == "sub")?.Value ?? user.FindFirst(c => c.Type == "nameidentifier")?.Value;
            Console.WriteLine($"UserId initialized: {newItem.UserId}"); // Log UserId for debugging
        }
    }

    private async Task HandleValidSubmit()
    {
        formSubmitted = true; // tracks if the form was submitted

        Console.WriteLine($"Submitting item with UserId: {newItem.UserId}");

        if (!confirmationGiven &&
            (string.IsNullOrWhiteSpace(newItem.Description) ||
             string.IsNullOrWhiteSpace(newItem.ImageUrl) ||
             string.IsNullOrWhiteSpace(selectedCategoryName)))
        {
            return;
        }

        try
        {
            var existingCategory = categories.FirstOrDefault(c => c.CategoryName == selectedCategoryName);
            if (existingCategory != null)
            {
                newItem.Category = existingCategory;
            }
            else
            {
                throw new Exception("Category not found");
            }

            await ItemProvider.AddItemAsync(newItem);
            isSuccess = true;
            isError = false;
            newItem = new Item();
            confirmationGiven = false;
            formSubmitted = false;
        }
        catch (Exception)
        {
            isSuccess = false;
            isError = true;
        }
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxAllowedSize: 1048576).ReadAsync(buffer);

                newItem.ImageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private void ConfirmContinue()
    {
        confirmationGiven = true;
    }

    private void OpenFileSelector()
    {
        // InputFile component opens the dialog automatically, no further action needed
    }
}

