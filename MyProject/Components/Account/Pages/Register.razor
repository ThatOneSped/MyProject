@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using MyProject.Components.Account.Shared
@using MyProject.Model
@using Microsoft.AspNetCore.Identity

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager

<PageTitle>Register - My Project</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<!-- Centered Card -->
<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card" style="width: 30rem;">
        <div class="card-body bg-light">
            <h5 class="card-title text-center">Register</h5>
            <EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
                <DataAnnotationsValidator />

                <div class="form-group mb-2">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" placeholder="Your Name" @bind-Value="Model.Name" />
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.Name)" />
                    </div>
                </div>

                <div class="form-group mb-2">
                    <label for="username">Username</label>
                    <InputText id="username" class="form-control" placeholder="Your Username" @bind-Value="Model.UserName" @onblur="CheckUsername" />
                    <div class="small text-danger" style="display:@(usernameExists ? "block" : "none")">
                        This username is already taken.
                    </div>
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.UserName)" />
                    </div>
                </div>

                <div class="form-group mb-2">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.Password)" />
                    </div>
                </div>

                <div class="form-group mb-2">
                    <label for="confirm">Confirm Password</label>
                    <InputText id="confirm" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.ConfirmPassword)" />
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-outline-primary w-100" disabled="@usernameExists">Register</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private bool usernameExists = false; // Track if username is taken

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    // Method to check username existence
    private async Task CheckUsername()
    {
        var existingUser = await UserManager.FindByNameAsync(Model.UserName);
        usernameExists = existingUser != null; // Set flag if username exists
    }

    public async Task RegisterUser()
    {
        if (usernameExists)
        {
            // Prevent registration if username already exists
            identityErrors = new List<IdentityError>
            {
                new IdentityError { Description = "This username is already taken." }
            };
            isError = true;
            return;
        }

        var user = new User
            {
                UserName = Model.UserName,
                Name = Model.Name
            };

        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        // Log the user in after registration
        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/Account/Login");
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your name.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter a username.")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}