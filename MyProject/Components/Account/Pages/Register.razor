@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using MyProject.Components.Account.Shared
@using MyProject.Model
@using Microsoft.AspNetCore.Identity

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager

<PageTitle>Register - My Project</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<!-- Centered Card for Register Form -->
<div class="d-flex justify-content-center align-items-center" style="height: 70vh;">
    <div class="card shadow-lg p-4" style="max-width: 400px; border: 1px solid #ccc;">
        <h5 class="card-title text-center mb-4">Register</h5>
        <EditForm OnValidSubmit="RegisterUser" Model="Model">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" placeholder="Your Name" @bind-Value="Model.Name" />
                <ValidationMessage For="@(() => Model!.Name)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" placeholder="Choose a Username" @bind-Value="Model.UserName" @onblur="CheckUsername" />
                <div class="text-danger small" style="display:@(usernameExists ? "block" : "none")"
                    This username is already taken.
                </div>
                <ValidationMessage For="@(() => Model!.UserName)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model!.Password)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label for="confirm" class="form-label">Confirm Password</label>
                <InputText id="confirm" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                <ValidationMessage For="@(() => Model!.ConfirmPassword)" class="text-danger small" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@usernameExists">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private bool usernameExists = false;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    private async Task CheckUsername()
    {
        var existingUser = await UserManager.FindByNameAsync(Model.UserName);
        usernameExists = existingUser != null;
    }

    public async Task RegisterUser()
    {
        if (usernameExists)
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError { Description = "This username is already taken." }
            };
            isError = true;
            return;
        }

        var user = new User
            {
                UserName = Model.UserName,
                Name = Model.Name
            };

        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/Account/Login");
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your name.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter a username.")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
